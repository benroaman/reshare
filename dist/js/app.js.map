{"version":3,"sources":["app.js","comments/new-comment-controller.js","nav/main-nav-controller.js","shares/share-factory.js","shares/shares-latest-controller.js","shares/shares-new-controller.js","shares/shares-popular-controller.js","utils/serviceService.js","utils/string-util.js","users/user-controller.js","users/user.js","users/users-controller.js","comments/service/commentService.js","shares/services/share-service.js","users/services/users-service.js"],"names":[],"mappings":"AAAA;AACA;AACA;ACFA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["// The root module for our Angular application\nvar app = angular.module('app', ['ngRoute']);\n","","app.controller('MainNavCtrl',\n  ['serviceService', '$location', 'StringUtil', function(serviceService, $location, StringUtil) {\n    var self = this;\n\n    // self.loggedIn = true;\n\n    // try {\n    //   serviceService.get('/api/users/me');\n    //   alert('fuck');\n    // } catch(err) {\n    //   self.loggedIn = false;\n    //   alert('success');\n    // }\n\n    self.isActive = function (path) {\n      // The default route is a special case.\n      if (path === '/') {\n        return $location.path() === '/';\n      }\n\n      return StringUtil.startsWith($location.path(), path);\n    };\n    //\n    // self.toggleLoggedIn = function () {\n    //   self.loggedIn = !self.loggedIn;\n    // }\n  }]);\n","app.factory('Share', function() {\n  return function(spec) {\n    date = new Date();\n    spec = spec || {};\n    return {\n      title: spec.title || '',\n      description: spec.description || '',\n      url: spec.url || '',\n      timestamp: date.getTime(),\n      timeString: date.toString(),\n      // author: spec.author, // non-mvp\n      // authorId: spec.authorId, // non-mvp\n      // upvotes: spec.upvotes || 0, // non-mvp\n      // downvotes: spec.downvotes || 0, // non-mvp\n      // comments: spec.comments || [], // non-mvp\n      // score: function() { // non-mvp\n      //   return this.upvotes - this.downvotes;\n      // },\n      // getComments: function() { // non-mvp\n      //   return this.comments;\n      // },\n      // equals: function(share) { // non-mvp\n      //   return (this.url === share.url);\n      // },\n    };\n  };\n});\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'shares/shares-latest.html',\n    controller: 'SharesLatestCtrl',\n    controllerAs: 'vm',\n    resolve: {\n      resources: ['shareService', function(shareService) {\n        return shareService.list();\n      }]\n    }\n  };\n\n  $routeProvider.when('/shares/latest', routeDefinition);\n\n}])\n.controller('SharesLatestCtrl', ['resources', 'shareService', function (resources, shareService) {\n  // TODO: load these via AJAX\n  var self = this;\n  self.shares = resources;\n\n  self.upVote = function(id) {\n    shareService.upVote(id);\n  }\n\n  self.downVote = function(id) {\n    shareService.downVote(id);\n  }\n\n  self.unVote = function(id) {\n    shareService.unVote(id);\n  }\n\n}]);\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'shares/shares-new.html',\n    controller: 'SharesNewCtrl',\n    controllerAs: 'vm',\n  };\n\n  $routeProvider.when('/shares/new', routeDefinition);\n\n}])\n.controller('SharesNewCtrl', ['Share', 'shareService', '$location', function (Share, shareService, $location) {\n\n  var self = this;\n  self.newShare = Share();\n\n  self.addShare = function () {\n    var share = Share(self.newShare);\n\n    shareService.addShare(share).then(function () {\n      $location.path('/shares/latest');\n    });\n  }\n\n}]);\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'shares/shares-popular.html',\n    controller: 'SharesPopCtrl',\n    controllerAs: 'vm',\n    resolve: {\n      resources: ['shareService', function (shareService) {\n        return shareService.list();\n      }]\n    }\n  };\n\n  $routeProvider.when('/', routeDefinition);\n  $routeProvider.when('/shares', routeDefinition);\n  $routeProvider.when('/shares/popular', routeDefinition);\n\n}])\n.controller('SharesPopCtrl', ['resources', 'shareService', function (resources, shareService) {\n  var self = this;\n  self.shares = resources;\n\n  self.upVote = function(id) {\n    shareService.upVote(id);\n  }\n\n  self.downVote = function(id) {\n    shareService.downVote(id);\n  }\n\n  self.unVote = function(id) {\n    shareService.unVote(id);\n  }\n}]);\n","app.factory('serviceService', ['$http', '$q', '$log', function($http, $q, $log) {\n\n  return {\n    get: function (url) {\n      return this.processAjaxPromise($http.get(url));\n    },\n\n    processAjaxPromise: function(p) {\n      return p.then(function (result) {\n        return result.data;\n      })\n      .catch(function (error) {\n        $log.log(error);\n      });\n    }\n\n  };\n\n}]);\n","// A little string utility... no biggie\napp.factory('StringUtil', function() {\n  return {\n    startsWith: function (str, subStr) {\n      str = str || '';\n      return str.slice(0, subStr.length) === subStr;\n    }\n  };\n});\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'users/user.html',\n    controller: 'UserCtrl',\n    controllerAs: 'vm',\n    resolve: {\n      user: ['$route', 'usersService', function ($route, usersService) {\n        var routeParams = $route.current.params;\n        return usersService.getByUserId(routeParams.userid);\n      }],\n      resources: ['shareService', function (shareService) {\n        return shareService.list();\n      }],\n    }\n  };\n\n  $routeProvider.when('/users/:userid', routeDefinition);\n}])\n.controller('UserCtrl', ['serviceService', '$http', 'resources', 'user', function (serviceService, $http, resources, user) {\n  var self = this;\n  self.user = user;\n\n  var newArr = []\n\n  for (var i = 0; i < resources.length; ++i) {\n    if (resources[i].userId === this.user.userId) {\n      newArr.push(resources[i]);\n    }\n  }\n\n  self.shares = newArr;\n\n  self.deleteShare = function(share) {\n    var index = self.shares.indexOf(share);\n    self.shares.splice(index, 1);\n    var url = '/api/res/' + share._id;\n    return serviceService.processAjaxPromise($http.delete(url));\n  }\n\n}]);\n","app.factory('User', function () {\n  return function (spec) {\n    spec = spec || {};\n    return {\n      userId: spec.userId || '',\n      role: spec.role || 'user'\n    };\n  };\n});\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'users/users.html',\n    controller: 'UsersCtrl',\n    controllerAs: 'vm',\n    resolve: {\n      users: ['usersService', function (usersService) {\n        return usersService.list();\n      }]\n    }\n  };\n\n  $routeProvider.when('/users', routeDefinition);\n}])\n.controller('UsersCtrl', ['users', 'usersService', 'User', function (users, usersService, User) {\n  var self = this;\n\n  self.users = users;\n\n  self.newUser = User();\n\n  self.addUser = function () {\n    // Make a copy of the 'newUser' object\n    var user = User(self.newUser);\n\n    // Add the user to our service\n    usersService.addUser(user).then(function () {\n      // If the add succeeded, remove the user from the users array\n      self.users = self.users.filter(function (existingUser) {\n        return existingUser.userId !== user.userId;\n      });\n\n      // Add the user to the users array\n      self.users.push(user);\n    });\n\n    // Clear our newUser property\n    self.newUser = User();\n  };\n}]);\n","","app.factory('shareService', ['serviceService', '$http', '$q', '$log', function(serviceService, $http, $q, $log) {\n\n  return {\n    list: function () {\n      return serviceService.get('/api/res');\n    },\n\n    getById: function (resId) {\n      if (!resId) {\n        throw new Error('getById requires a resource id');\n      }\n\n      return serviceService.get('/api/res/' + resId);\n    },\n\n    addShare: function (res) {\n      return serviceService.processAjaxPromise($http.post('/api/res', res));\n    },\n\n    upVote: function (resId) {\n      var url = 'api/res/' + resId + '/votes';\n      return serviceService.processAjaxPromise($http.post(url, { vote: 1 }));\n    },\n\n    downVote: function (resId) {\n      var url = 'api/res/' + resId + '/votes';\n      return serviceService.processAjaxPromise($http.post(url, { vote: -1 }));\n    },\n\n    unVote: function (resId) {\n      var url = 'api/res/' + resId + '/votes';\n      return serviceService.processAjaxPromise($http.post(url, { vote: 0 }));\n    }\n  };\n}]);\n","app.factory('usersService', ['serviceService', '$http', '$q', '$log', function(serviceService, $http, $q, $log) {\n\n  return {\n    list: function () {\n      return serviceService.get('/api/users');\n    },\n\n    getByUserId: function (userId) {\n      if (!userId) {\n        throw new Error('getByUserId requires a user id');\n      }\n\n      return serviceService.get('/api/users/' + userId);\n    },\n\n    addUser: function (user) {\n      return serviceService.processAjaxPromise($http.post('/api/users', user));\n    }\n  };\n}]);\n"],"sourceRoot":"/source/"}